
#pragma kernel Populate
#pragma kernel SetDustColors
#pragma kernel Update
#pragma kernel VacuumUp
#pragma kernel Emit
#pragma kernel BlowWind
#pragma kernel Explode

#include "Type Definitions.cginc"
#include "Math Functions.cginc"
#include "Random Functions.cginc"
#include "Physics Functions.cginc"

/*******************************************************************
 *                        Naming Conventions
/*******************************************************************
 - AToB  : B - A
 - ~Dir  : 방향 벡터(크기 1)
 - ~Dist : 두 위치 벡터 사이의 거리(스칼라)
 - ~Len  : 한 벡터의 길이
/*******************************************************************/

/*******************************************************************
/*                            Definitions
/*******************************************************************/
#define TRUE 1
#define FALSE 0
#define TAU 6.28318530
#define NUM_THREADS_HEADER numthreads(64,1,1)

/*******************************************************************
/*                            Variables
/*******************************************************************/
/* Buffers */
RWStructuredBuffer<Dust> dustBuffer;        // 먼지 위치, 생존 여부
RWStructuredBuffer<half3> dustColorBuffer;  // 먼지 색상 RGB
RWStructuredBuffer<float3> velocityBuffer;  // 먼지 속도
RWStructuredBuffer<uint> aliveNumberBuffer; // 생존한 먼지 개수
RWStructuredBuffer<bool> collisionFlagBuffer; // 이번 프레임 충돌 처리 여부

/* Colliders */
RWStructuredBuffer<float4> sphereColliderBuffer;
uint sphereColliderCount;

RWStructuredBuffer<Bounds> boxColliderBuffer;
uint boxColliderCount;

/* Init On Load */
uint dustCount;        // 먼지 개수

/* Common */
float3 spawnBoundsMin; // 먼지 생성 영역 - 최소 지점
float3 spawnBoundsMax; // 먼지 생성 영역 - 최대 지점
float3 worldBoundsMin; // 월드 제한 영역 - 최소 지점
float3 worldBoundsMax; // 월드 제한 영역 - 최대 지점
float deltaTime;

/* Populate */
half3 dustColorA; // 무작위 색상 A
half3 dustColorB; // 무작위 색상 B

/* Controller */
float3 controllerPos;     // 월드 위치
float3 controllerForward; // 전방 벡터

/* Physics(Update) */
float3 gravity;      // 중력 가속도
float radius;        // 먼지 반지름
float mass;          // 질량
float drag;          // (공기) 저항력
float elasticity;    // 탄성력

/* Vacuum Cleaner */
float cleanerSqrDist;       // 먼지 흡입 범위(반지름) - 제곱
float cleanerSqrDeathRange; // 먼지 소멸 범위(반지름) - 제곱
float cleanerSqrForce;      // 빨아들이는 힘 - 제곱
float cleanerDotThreshold;  // 진공 청소기 원뿔 영역 내적 범위
bool  cleanerKillOn;        // 흡수하여 먼지 제거할지 여부

/* Emitter */
float time;            // Time.time
float emitterForce;    // 방출 강도
float emitterDist;     // 방출 거리
float emitterAngleRad; // 방출 각도
uint emissionPerSec;   // 초당 먼지 발사 개수
float4x4 controllerMatrix; //  localToWorld

/* Blower */
float blowerSqrDist;       // 영향 범위(반지름) - 제곱
float blowerSqrForce;      // 미는 힘 - 제곱
float blowerDotThreshold;  // 원뿔 영역 내적 범위

/* Explode */
float3 explosionPosition; // 폭발 중심 위치
float explosionSqrRange;  // 폭발 반지름 - 제곱
float explosionForce;     // 폭발 힘

/*******************************************************************
/*                            Functions
/*******************************************************************/
// 먼지 파괴
void DestroyDust(uint i)
{
    dustBuffer[i].isAlive = FALSE;
    InterlockedAdd(aliveNumberBuffer[0], -1);
}

/*******************************************************************
/*                             Kernels
/*******************************************************************/
// 초기 생성
[NUM_THREADS_HEADER]
void Populate (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;

    // 무작위 요소 추가 : XZ평면 반지름 1 크기의 원 좌표 가산
    uint deg = i % 360;
    float3 ranDir = float3(cos(deg), 0, sin(deg));
    float3 ranPos = Random11(i) * ranDir;
    
    float width = SqrMagnitude(spawnBoundsMax - spawnBoundsMin);
    float seed  = i * 100000 / (width * dustCount);
    dustBuffer[i].position = RandomRange13(seed, spawnBoundsMin, spawnBoundsMax) + ranPos;
    dustBuffer[i].isAlive  = TRUE;
}

// 먼지 색상 설정(2가지 중 랜덤)
[NUM_THREADS_HEADER]
void SetDustColors (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    
    float2 seed2d = float2(i % dustCount, i / dustCount);
    float  t      = Random21(seed2d);
    dustColorBuffer[i] = lerp(dustColorA, dustColorB, t);
}

// 실시간 업데이트(물리)
[NUM_THREADS_HEADER]
void Update (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if(dustBuffer[i].isAlive == FALSE) return;
    if(i >= dustCount) return;

    float3 A = 0; // 가속도 합 벡터
    
    // F = m * a
    // dv = a * dt

    // ===================================================
    //                    속도 계산
    // ===================================================

    // [1] 중력
    A += gravity;

    // [2] 저항력
    A -= velocityBuffer[i] * drag;

    // 속도 적용 : dv = a * dt,   v = v0 + dv
    velocityBuffer[i] += A * deltaTime;
    
    // ===================================================
    //              이동 시뮬레이션, 충돌 검사
    // ===================================================
    // 다음 프레임 위치 계산 : S = S0 + V * t
    float3 currPos = dustBuffer[i].position;
    float3 nextPos = currPos + velocityBuffer[i] * deltaTime;

    // 충돌 처리 완료 여부
    collisionFlagBuffer[i] = false;

    // [1] Sphere Colliders
    for(uint scIndex = 0; scIndex < sphereColliderCount; scIndex++)
    {
        if(collisionFlagBuffer[i] == true) continue;

        float4 sphere = sphereColliderBuffer[scIndex];
        if(SphereToSphereIntersection(float4(nextPos, radius), sphere))
        {
            DustToSphereCollision(currPos, nextPos, velocityBuffer[i], radius, sphere, elasticity, collisionFlagBuffer[i]);
        }
    }

    // [2] Box Colliders
    for(uint bcIndex = 0; bcIndex < boxColliderCount; bcIndex++)
    {
        if(collisionFlagBuffer[i] == true) continue;

        Bounds box = boxColliderBuffer[bcIndex];
        if(SphereToAABBIntersection(nextPos, radius, box))
        {
            DustToAABBCollision(currPos, nextPos, velocityBuffer[i], radius, box, elasticity, collisionFlagBuffer[i]);
        }
    }

    // [Last] 월드 영역 제한(Box)
    Bounds bounds;
    bounds.min = worldBoundsMin;
    bounds.max = worldBoundsMax;
    ConfineWithinWorldBounds(currPos, nextPos, velocityBuffer[i], radius, elasticity, bounds);

    // 다음 위치 적용
    dustBuffer[i].position = nextPos;
}

// 진공 청소기로 빨아들이기
[NUM_THREADS_HEADER]
void VacuumUp (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if(dustBuffer[i].isAlive == FALSE) return;
    if(i >= dustCount) return;

    float3 F = 0; // 힘 합 벡터
    bool flag = false;

    float3 currPos = dustBuffer[i].position;       // 현재 프레임 먼지 위치
    float3 currToHead = (controllerPos - currPos); // 먼지 -> 청소기 입구
    float sqrDist = SqrMagnitude(currToHead);      // 청소기 입구 <-> 먼지 사이 거리 제곱

    // 원뿔 범위 및 힘 계산
    if (sqrDist < cleanerSqrDist)
    {
        float3 dustToHeadDir = normalize(currToHead); // 먼지 -> 청소기 입구 방향
        float dotValue = dot(controllerForward, -dustToHeadDir);

        // 원뿔 범위 내에 있을 경우 빨아들이기
        if(dotValue > cleanerDotThreshold)
        {
            float force = cleanerSqrForce / sqrDist;

            // 빨아들이는 힘
            F += dustToHeadDir * force * dotValue;

            flag = true;
        }
    }

    // 속도 계산
    if(flag)
    {
        // 가속도
        float3 A = F / mass;

        // 속도
        velocityBuffer[i] += A * deltaTime;

        // 제거 모드 확인
        if(cleanerKillOn == false)
            return;

        // 다음 프레임 위치 예측 : S = S0 + V * t
        float3 nextPos = currPos + velocityBuffer[i] * deltaTime;

        float3 headToNext = nextPos - controllerPos;
        float3 headToCurrDir = normalize(-currToHead);
        float3 headToNextDir = normalize(headToNext);

        // 현재 프레임에 먼지가 원뿔 범위 내에 있었다면
        if(dot(controllerForward, headToCurrDir) > cleanerDotThreshold)
        {
            // 다음 프레임에 원뿔 밖으로 나가거나 입구에 근접하면 파괴
            if(dot(controllerForward, headToNextDir) < cleanerDotThreshold ||
                SqrMagnitude(headToNext) < cleanerSqrDeathRange)
            {
                DestroyDust(i);
            }
        }
    }
}

// 죽었던 먼지들 살려서 발사
[NUM_THREADS_HEADER]
void Emit (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if(dustBuffer[i].isAlive == TRUE) return;
    if(i >= dustCount) return;

    /* 발사 확률 계산*/
    // emissionPerSec = 프레임당 발사되는 개수 / deltaTime
    // 발사 확률 = 프레임당 발사되는 개수 / 현재 개수

    float aliveCount = dustCount - aliveNumberBuffer[0]; // 죽은(발사 가능한) 먼지 개수
    float emissionCount = emissionPerSec * deltaTime;    // 발사할 먼지 개수
    float emissionRatio = emissionCount / aliveCount;    // 발사 확률

    float seed = (i + time) / 79238.288;
    float r = Random11(seed);
    if(r > emissionRatio) return;

    // Note : localDir의 z를 1로 고정하고, xy를 tan(emitterAngleRad)로 지정함으로써
    // 발사되는 먼지들이 형성하는 원뿔의 각도를 suctionAngle로 설정하는 효과를 얻는다.
    
    // r2.x : 각 먼지의 각도 (-360 ~ 360), r2.y : 원의 반지름(원뿔의 각도 결정)
    float seed2 = i / 82801.277;
    float2 r2 = RandomRange12(seed2, float2(-TAU, 0), float2(TAU, 1));
    float2 randomCircle = float2(cos(r2.x), sin(r2.x)) * r2.y * tan(emitterAngleRad);
    
    // 발사 방향 벡터 공간 변환
    // Note - localDir.z : 기본 값 1 => Z축 볼륨을 주기 위해 연산 추가
    float3 localDir = float3(randomCircle.x, randomCircle.y, (1 + r * r2.y * TAU));
    float3 worldDir = mul(controllerMatrix, float4(localDir, 0)).xyz;
    
    float3 F = worldDir * emitterForce * emitterDist;
    float3 A = F / mass;
    float3 V = A * deltaTime;

    dustBuffer[i].position = controllerPos;
    velocityBuffer[i] = V;

    // 먼지 되살리기
    dustBuffer[i].isAlive = TRUE;
    InterlockedAdd(aliveNumberBuffer[0], 1);
}

// 바람 불기
[NUM_THREADS_HEADER]
void BlowWind (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if(dustBuffer[i].isAlive == FALSE) return;
    if(i >= dustCount) return;

    float3 dustPos = dustBuffer[i].position;        // 현재 프레임 먼지 위치
    float3 headToDust = (dustPos - controllerPos);  // 입구 -> 먼지
    float sqrDist = SqrMagnitude(headToDust);       // 입구<-> 먼지 사이 거리 제곱

    // 구형 범위 내에 포함되는 경우
    if (sqrDist < blowerSqrDist)
    {
        float3 headToDustDir = normalize(headToDust); // 입구 -> 먼지 방향
        float dotValue = dot(controllerForward, headToDustDir);

        // 원뿔 범위 내에 포함되는 경우, 밀쳐내기
        if(dotValue > blowerDotThreshold)
        {
            float force = blowerSqrForce / sqrt(sqrDist);

            float3 F = headToDustDir * force * dotValue;
            float3 A = F / mass;
            velocityBuffer[i] += A * deltaTime;
        }
    }
}

// 지점 폭발
[NUM_THREADS_HEADER]
void Explode (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if(dustBuffer[i].isAlive == FALSE) return;
    if(i >= dustCount) return;

    float3 dustPos = dustBuffer[i].position;             // 현재 프레임 먼지 위치
    float3 centerToDust = (dustPos - explosionPosition); // 폭발 중심 -> 먼지
    float sqrDist = SqrMagnitude(centerToDust);          // 폭발 중심<-> 먼지 사이 거리 제곱

    // 구형 범위 내에 포함되는 경우
    if (sqrDist < explosionSqrRange)
    {
        float t = 1 - (sqrDist / explosionSqrRange);
        float f = t * explosionForce;
        float3 dir = normalize(centerToDust);

        float3 F = dir * f;
        float3 A = F / mass;
        velocityBuffer[i] += A * deltaTime;
    }
}